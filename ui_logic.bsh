/******************************************************************************/
/**                                TOP MATTER                                **/
/**                                                                          **/
/** Almost exclusively boilerplate code.                                     **/
/******************************************************************************/
import android.util.Log;
import java.util.concurrent.Callable;

User   user;
String userid;

makeLocalID() {
    fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);", null);
}
makeLocalID();

startSync() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
}

stopSync() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
}

setSyncMinInterval(4.0f);
setSyncMaxInterval(6.0f);
setSyncDelay(5.0f);
setSyncEnabled(true);
setFileSyncEnabled(true);

/******************************************************************************/
/**                                   UTIL                                   **/
/**                                                                          **/
/** Code which is general enough to be, or have been, used in other modules. **/
/******************************************************************************/
updateGPSDiagnostics() {
    String gpsDiagnosticsRef = "control/control_control/GPS_Diagnostics";
    String status = "";
    String previousStatus = getFieldValue(gpsDiagnosticsRef);
    String notInitialised = "{GPS_is_not_initialised}";

    // Check if GPS is initialised or was previously initialised.
    if (!isExternalGPSOn() && !isInternalGPSOn()) {
        if (!isNull(previousStatus) && !previousStatus.equals(notInitialised)) {
            // previous gps status is some last valid coordinate.
            String error = "{GPS_is_no_longer_initialised}. {Previous_status}:";
            // check that error message wasn't previously appended to the previous status message.
            if (previousStatus.length() < error.length() ||
                    previousStatus.subSequence(0, error.length()).equals(error)) {
                status = previousStatus;
            } else {
                status = error + "\n" + previousStatus;
            }
        } else {
            status = notInitialised;
        }
    } else {
        status += "{Internal_GPS}: ";
        if (isInternalGPSOn())
        {
            status += "{on}";
        } else {
            status += "{off}";
        }
        status += "\nExternal GPS: ";
        if (isExternalGPSOn())
        {
            if (isBluetoothConnected()) {
                status += "{on_and_bluetooth_connected}";
            } else {
                status += "{on_and_bluetooth_disconnected}";
            }
        } else {
            status += "{off}";
        }
        Object position = getGPSPosition();
        if (position != null) {
            Object projPosition = getGPSPositionProjected();
            status += "\n{Latitude}: " + position.getLatitude();
            status += "   {Longitude}: " + position.getLongitude();
            status += "\n{Northing}: " + projPosition.getLatitude();
            status += "   {Easting}: " + projPosition.getLongitude();
            status += "\n{Accuracy}: " + getGPSEstimatedAccuracy();
        } else {
            status += "\n{Position}: {no_GPS_position_could_be_found}";
        }
    }
    setFieldValue(gpsDiagnosticsRef, status);
}


onEvent("oralhistory/recordingtab/TakeGPS", "click", "takeFromGPS()");
takeFromGPS(){
  Object position = getGPSPosition();
  Object projPosition = getGPSPositionProjected();
  if (projPosition != null ){
    Double latitude = position.getLatitude();
    Double longitude = position.getLongitude();
    Double northing = projPosition.getLatitude();
    Double easting = projPosition.getLongitude();
    setFieldValue("oralhistory/recordingtab/Latitude", latitude);
    setFieldValue("oralhistory/recordingtab/Longitude", longitude);
    setFieldValue("oralhistory/recordingtab/Northing", northing);
    setFieldValue("oralhistory/recordingtab/Easting", easting);
  } else {
    showToast("{GPS_Not_initialized}");
  }
}


String getAttributeVocabQuery = "SELECT vocabid, vocabname "+
                                  "  FROM vocabulary "+
                                  "  JOIN attributekey USING (attributeid) "+
                                  " WHERE attributename = 'Recorded' "+
                                  " ORDER BY vocabcountorder;";
  fetchAll(getAttributeVocabQuery,
    new FetchCallback() {
      onFetch(result) {
        populateRadioGroup("oralhistory/interviewdetails/recorded", result);
    }});

/******************************************************************************/
/**                                ACTION BAR                                **/
/******************************************************************************/
addActionBarItem("clean synced files", new ActionButtonCallback() {
    actionOnLabel() {
      "Clean Synced Files";
    }
    actionOn() {
      cleanSyncedFiles();
    }
});

addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Disable Sync";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("Sync Disabled");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "Enable Sync";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("Sync Enabled");
    }
});

addActionBarItem("internal gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Disable Internal GPS";
    }
    actionOn() {
        stopGPS();
        showToast("Internal GPS Disabled");
        updateGPSDiagnostics();
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "Enable Internal GPS";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startInternalGPS();
        showToast("Internal GPS Enabled");
        updateGPSDiagnostics();
    }
});

addActionBarItem("external gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Disable External GPS";
    }
    actionOn() {
        stopGPS();
        if (isBluetoothConnected()) {
          showToast("External GPS Disabled");
        } else {
          showToast("Please Enable Bluetooth");
        }
        updateGPSDiagnostics();
    }
    isActionOff() {
        isExternalGPSOn();
    }
    actionOffLabel() {
        "Enable External GPS";
    }
    actionOff() {
        if(isInternalGPSOn()) {
            stopGPS();
        }
        startExternalGPS();
        if(isBluetoothConnected()) {
            showToast("External GPS Enabled");
        } else {
            showToast("Please Enable Bluetooth");
            this.actionOn();
        }
        updateGPSDiagnostics();
    }
});

/******************************************************************************/
/**                            CONTROL TAB GROUP                             **/
/******************************************************************************/
onEvent("control/control_control"              , "show"  , "initSearch(); loadSearch(); updateGPSDiagnostics();");
onEvent("control/control_control/Sample_List"  , "click" , "loadSample();");
onEvent("control/control_control/Sample_Types" , "click" , "loadSearch();");
onEvent("control/control_control/newDiary"     , "click" , "newDiary()");
onEvent("control/control_control/newform"      , "click" , "newForm()");

form_id = null;

newForm() {
    form_id = null;
    newTabGroup("oralhistory");
}

loadForm() {
    form_id = getListItemValue();
    showTabGroup("oralhistory", form_id);
}

loadList() {
    String fetchEntities = "" +
        "SELECT   uuid, response " +
        "FROM     latestNonDeletedArchEntFormattedIdentifiers " +
        "JOIN     createdmodifiedatby " +
        "USING    (uuid) " +
        "WHERE    aenttypename = 'Oral History' " +
        "ORDER BY createdat DESC limit ? offset ?";

    populateCursorList(
        "control/control_control/formlist",
        fetchEntities,
        25
    );
}

setMonthDay(String path) {
    setFieldValue(path, new java.text.SimpleDateFormat("MMM dd").format(new Date()));
}

newDiary() {
    diary_id = null;
    newTabGroup("Diary");
    setMonthDay("Diary/Diary/Timestamp");
    setFieldValue("Diary/Diary/CreatedBy", username);
}

initSearch() {
    List sample_types = new ArrayList();
    sample_types.add(new NameValuePair("{Oral_History}", "Oral History"));
    sample_types.add(new NameValuePair("{Diary}"       , "Diary"));
    populateDropDown("control/control_control/Sample_Types", sample_types);
}

loadSearch() {
    String type = getFieldValue("control/control_control/Sample_Types");
    populateCursorList(
        "control/control_control/Sample_List",
        "select uuid, response from latestNonDeletedArchEntFormattedIdentifiers where aenttypename like '%" + type + "%' limit ? offset ?;",
        25
    );
}

loadSample() {
    String sampleID = getListItemValue();
    if (isNull(sampleID)) {
        return;
    }

    String fetchArchentType = "" +
        "SELECT aenttypename " +
        "FROM   latestnondeletedarchent " +
        "JOIN   aenttype " +
        "USING  (aenttypeid) " +
        "WHERE  uuid = '" + sampleID + "'";

    fetchAll(fetchArchentType ,
     new FetchCallback() {
        onFetch(result) {
            form_id  = null;
            diary_id = null;

            if (result.get(0).get(0).equals("Oral History")) {
                form_id = sampleID;
                showTabGroup("oralhistory", form_id);
            } else if (result.get(0).get(0).equals("Diary")) {
                diary_id = sampleID;
                showTabGroup("Diary", diary_id);
            } else {
                showWarning("Uh-oh!", "Something bad happened in loadSample()");
            }
        }
    });
}

/******************************************************************************/
/**                              USER TAB GROUP                              **/
/******************************************************************************/
onEvent("user/usertab/users", "click", "login()");
onEvent("user/usertab"      , "show" , "loadUsers()");

String username = "";
String device   = "";

loadUsers() {
    String q = "" +
        "SELECT userid, fname || ' ' || lname " +
        "FROM user ";

    populateUserList = new FetchCallback() {
        onFetch(result) {
            populateList("user/usertab/users", result);
        }
    };

    fetchAll(q, populateUserList);
}

login() {
    String q = "" +
        "SELECT userid, fname, lname, email " +
        "FROM   user " +
        "WHERE  userid = '" + getListItemValue() + "' ";

    setUsernameAndShowControl = new FetchCallback() {
        onFetch(result) {
            print(result);

            user = new User(
                result.get(0),
                result.get(1),
                result.get(2),
                result.get(3)
            );
            setUser(user);

            username = result.get(1) + " " + result.get(2);

            showTabGroup("control");
        }
        onError(result){
            Log.e("login", "PANIC");
        }
    };

    fetchOne(q, setUsernameAndShowControl);
}

/******************************************************************************/
/**                          ORAL HISTORY TAB GROUP                          **/
/******************************************************************************/
onEvent("oralhistory/recordingtab/attachAudio", "click", "attachAudioTo(\"oralhistory/recordingtab/Audio\")");
onEvent("oralhistory/recordingtab/attachVideo", "click", "attachVideoTo(\"oralhistory/recordingtab/Video\")");
onEvent("oralhistory"                         , "show",  "saveForm()");

saveForm() {
    Boolean enableAutosave = true;
    updateFormId = new SaveCallback() {
        onSave(uuid, newRecord) {
            form_id = uuid;
        }
        onError(message) {
            showWarning("", message);
        }
    };
    saveTabGroup("oralhistory", form_id, null, null, updateFormId, enableAutosave);
}

/******************************************************************************/
/**                             DIARY TAB GROUP                              **/
/******************************************************************************/
onEvent("Diary/Diary/attachAudio" , "click" , "attachAudioTo(\"Diary/Diary/Audio\")");
onEvent("Diary/Diary/attachVideo" , "click" , "attachVideoTo(\"Diary/Diary/Video\")");
onEvent("Diary"                   , "show"  , "saveDiary()");

onEvent("Diary/Diary/attachSketch", "click", "attachFileTo(\"Diary/Diary/Sketch\")");
onEvent("Diary/Diary/attachPhoto",  "click", "attachPictureTo(\"Diary/Diary/Photo\")");
onEvent("Diary/Diary/viewattached", "click", "viewArchEntAttachedFiles(diary_id)");


diary_id = null;

saveDiary() {
    Boolean enableAutosave = true;
    updateFormId = new SaveCallback() {
        onSave(uuid, newRecord) {
            diary_id = uuid;
        }
        onError(message) {
            showWarning("", message);
        }
    };
    saveTabGroup("Diary", diary_id, null, null, updateFormId, enableAutosave);
}
